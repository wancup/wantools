/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UuidIndexRouteImport } from './routes/uuid/index'
import { Route as UriEncodingIndexRouteImport } from './routes/uri-encoding/index'
import { Route as TransitionIndexRouteImport } from './routes/transition/index'
import { Route as QrCodeIndexRouteImport } from './routes/qr-code/index'
import { Route as PointerEventIndexRouteImport } from './routes/pointer-event/index'
import { Route as KeyboardEventIndexRouteImport } from './routes/keyboard-event/index'
import { Route as DirectoryTreeIndexRouteImport } from './routes/directory-tree/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UuidIndexRoute = UuidIndexRouteImport.update({
  id: '/uuid/',
  path: '/uuid/',
  getParentRoute: () => rootRouteImport,
} as any)
const UriEncodingIndexRoute = UriEncodingIndexRouteImport.update({
  id: '/uri-encoding/',
  path: '/uri-encoding/',
  getParentRoute: () => rootRouteImport,
} as any)
const TransitionIndexRoute = TransitionIndexRouteImport.update({
  id: '/transition/',
  path: '/transition/',
  getParentRoute: () => rootRouteImport,
} as any)
const QrCodeIndexRoute = QrCodeIndexRouteImport.update({
  id: '/qr-code/',
  path: '/qr-code/',
  getParentRoute: () => rootRouteImport,
} as any)
const PointerEventIndexRoute = PointerEventIndexRouteImport.update({
  id: '/pointer-event/',
  path: '/pointer-event/',
  getParentRoute: () => rootRouteImport,
} as any)
const KeyboardEventIndexRoute = KeyboardEventIndexRouteImport.update({
  id: '/keyboard-event/',
  path: '/keyboard-event/',
  getParentRoute: () => rootRouteImport,
} as any)
const DirectoryTreeIndexRoute = DirectoryTreeIndexRouteImport.update({
  id: '/directory-tree/',
  path: '/directory-tree/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeIndexRoute
  '/keyboard-event': typeof KeyboardEventIndexRoute
  '/pointer-event': typeof PointerEventIndexRoute
  '/qr-code': typeof QrCodeIndexRoute
  '/transition': typeof TransitionIndexRoute
  '/uri-encoding': typeof UriEncodingIndexRoute
  '/uuid': typeof UuidIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeIndexRoute
  '/keyboard-event': typeof KeyboardEventIndexRoute
  '/pointer-event': typeof PointerEventIndexRoute
  '/qr-code': typeof QrCodeIndexRoute
  '/transition': typeof TransitionIndexRoute
  '/uri-encoding': typeof UriEncodingIndexRoute
  '/uuid': typeof UuidIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/directory-tree/': typeof DirectoryTreeIndexRoute
  '/keyboard-event/': typeof KeyboardEventIndexRoute
  '/pointer-event/': typeof PointerEventIndexRoute
  '/qr-code/': typeof QrCodeIndexRoute
  '/transition/': typeof TransitionIndexRoute
  '/uri-encoding/': typeof UriEncodingIndexRoute
  '/uuid/': typeof UuidIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  id:
    | '__root__'
    | '/'
    | '/directory-tree/'
    | '/keyboard-event/'
    | '/pointer-event/'
    | '/qr-code/'
    | '/transition/'
    | '/uri-encoding/'
    | '/uuid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DirectoryTreeIndexRoute: typeof DirectoryTreeIndexRoute
  KeyboardEventIndexRoute: typeof KeyboardEventIndexRoute
  PointerEventIndexRoute: typeof PointerEventIndexRoute
  QrCodeIndexRoute: typeof QrCodeIndexRoute
  TransitionIndexRoute: typeof TransitionIndexRoute
  UriEncodingIndexRoute: typeof UriEncodingIndexRoute
  UuidIndexRoute: typeof UuidIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/uuid/': {
      id: '/uuid/'
      path: '/uuid'
      fullPath: '/uuid'
      preLoaderRoute: typeof UuidIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/uri-encoding/': {
      id: '/uri-encoding/'
      path: '/uri-encoding'
      fullPath: '/uri-encoding'
      preLoaderRoute: typeof UriEncodingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transition/': {
      id: '/transition/'
      path: '/transition'
      fullPath: '/transition'
      preLoaderRoute: typeof TransitionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/qr-code/': {
      id: '/qr-code/'
      path: '/qr-code'
      fullPath: '/qr-code'
      preLoaderRoute: typeof QrCodeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pointer-event/': {
      id: '/pointer-event/'
      path: '/pointer-event'
      fullPath: '/pointer-event'
      preLoaderRoute: typeof PointerEventIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keyboard-event/': {
      id: '/keyboard-event/'
      path: '/keyboard-event'
      fullPath: '/keyboard-event'
      preLoaderRoute: typeof KeyboardEventIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/directory-tree/': {
      id: '/directory-tree/'
      path: '/directory-tree'
      fullPath: '/directory-tree'
      preLoaderRoute: typeof DirectoryTreeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirectoryTreeIndexRoute: DirectoryTreeIndexRoute,
  KeyboardEventIndexRoute: KeyboardEventIndexRoute,
  PointerEventIndexRoute: PointerEventIndexRoute,
  QrCodeIndexRoute: QrCodeIndexRoute,
  TransitionIndexRoute: TransitionIndexRoute,
  UriEncodingIndexRoute: UriEncodingIndexRoute,
  UuidIndexRoute: UuidIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
