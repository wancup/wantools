/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UuidIndexImport } from './routes/uuid/index'
import { Route as UriEncodingIndexImport } from './routes/uri-encoding/index'
import { Route as TransitionIndexImport } from './routes/transition/index'
import { Route as QrCodeIndexImport } from './routes/qr-code/index'
import { Route as PointerEventIndexImport } from './routes/pointer-event/index'
import { Route as KeyboardEventIndexImport } from './routes/keyboard-event/index'
import { Route as DirectoryTreeIndexImport } from './routes/directory-tree/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UuidIndexRoute = UuidIndexImport.update({
  id: '/uuid/',
  path: '/uuid/',
  getParentRoute: () => rootRoute,
} as any)

const UriEncodingIndexRoute = UriEncodingIndexImport.update({
  id: '/uri-encoding/',
  path: '/uri-encoding/',
  getParentRoute: () => rootRoute,
} as any)

const TransitionIndexRoute = TransitionIndexImport.update({
  id: '/transition/',
  path: '/transition/',
  getParentRoute: () => rootRoute,
} as any)

const QrCodeIndexRoute = QrCodeIndexImport.update({
  id: '/qr-code/',
  path: '/qr-code/',
  getParentRoute: () => rootRoute,
} as any)

const PointerEventIndexRoute = PointerEventIndexImport.update({
  id: '/pointer-event/',
  path: '/pointer-event/',
  getParentRoute: () => rootRoute,
} as any)

const KeyboardEventIndexRoute = KeyboardEventIndexImport.update({
  id: '/keyboard-event/',
  path: '/keyboard-event/',
  getParentRoute: () => rootRoute,
} as any)

const DirectoryTreeIndexRoute = DirectoryTreeIndexImport.update({
  id: '/directory-tree/',
  path: '/directory-tree/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/directory-tree/': {
      id: '/directory-tree/'
      path: '/directory-tree'
      fullPath: '/directory-tree'
      preLoaderRoute: typeof DirectoryTreeIndexImport
      parentRoute: typeof rootRoute
    }
    '/keyboard-event/': {
      id: '/keyboard-event/'
      path: '/keyboard-event'
      fullPath: '/keyboard-event'
      preLoaderRoute: typeof KeyboardEventIndexImport
      parentRoute: typeof rootRoute
    }
    '/pointer-event/': {
      id: '/pointer-event/'
      path: '/pointer-event'
      fullPath: '/pointer-event'
      preLoaderRoute: typeof PointerEventIndexImport
      parentRoute: typeof rootRoute
    }
    '/qr-code/': {
      id: '/qr-code/'
      path: '/qr-code'
      fullPath: '/qr-code'
      preLoaderRoute: typeof QrCodeIndexImport
      parentRoute: typeof rootRoute
    }
    '/transition/': {
      id: '/transition/'
      path: '/transition'
      fullPath: '/transition'
      preLoaderRoute: typeof TransitionIndexImport
      parentRoute: typeof rootRoute
    }
    '/uri-encoding/': {
      id: '/uri-encoding/'
      path: '/uri-encoding'
      fullPath: '/uri-encoding'
      preLoaderRoute: typeof UriEncodingIndexImport
      parentRoute: typeof rootRoute
    }
    '/uuid/': {
      id: '/uuid/'
      path: '/uuid'
      fullPath: '/uuid'
      preLoaderRoute: typeof UuidIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeIndexRoute
  '/keyboard-event': typeof KeyboardEventIndexRoute
  '/pointer-event': typeof PointerEventIndexRoute
  '/qr-code': typeof QrCodeIndexRoute
  '/transition': typeof TransitionIndexRoute
  '/uri-encoding': typeof UriEncodingIndexRoute
  '/uuid': typeof UuidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeIndexRoute
  '/keyboard-event': typeof KeyboardEventIndexRoute
  '/pointer-event': typeof PointerEventIndexRoute
  '/qr-code': typeof QrCodeIndexRoute
  '/transition': typeof TransitionIndexRoute
  '/uri-encoding': typeof UriEncodingIndexRoute
  '/uuid': typeof UuidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/directory-tree/': typeof DirectoryTreeIndexRoute
  '/keyboard-event/': typeof KeyboardEventIndexRoute
  '/pointer-event/': typeof PointerEventIndexRoute
  '/qr-code/': typeof QrCodeIndexRoute
  '/transition/': typeof TransitionIndexRoute
  '/uri-encoding/': typeof UriEncodingIndexRoute
  '/uuid/': typeof UuidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  id:
    | '__root__'
    | '/'
    | '/directory-tree/'
    | '/keyboard-event/'
    | '/pointer-event/'
    | '/qr-code/'
    | '/transition/'
    | '/uri-encoding/'
    | '/uuid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DirectoryTreeIndexRoute: typeof DirectoryTreeIndexRoute
  KeyboardEventIndexRoute: typeof KeyboardEventIndexRoute
  PointerEventIndexRoute: typeof PointerEventIndexRoute
  QrCodeIndexRoute: typeof QrCodeIndexRoute
  TransitionIndexRoute: typeof TransitionIndexRoute
  UriEncodingIndexRoute: typeof UriEncodingIndexRoute
  UuidIndexRoute: typeof UuidIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirectoryTreeIndexRoute: DirectoryTreeIndexRoute,
  KeyboardEventIndexRoute: KeyboardEventIndexRoute,
  PointerEventIndexRoute: PointerEventIndexRoute,
  QrCodeIndexRoute: QrCodeIndexRoute,
  TransitionIndexRoute: TransitionIndexRoute,
  UriEncodingIndexRoute: UriEncodingIndexRoute,
  UuidIndexRoute: UuidIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/directory-tree/",
        "/keyboard-event/",
        "/pointer-event/",
        "/qr-code/",
        "/transition/",
        "/uri-encoding/",
        "/uuid/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/directory-tree/": {
      "filePath": "directory-tree/index.tsx"
    },
    "/keyboard-event/": {
      "filePath": "keyboard-event/index.tsx"
    },
    "/pointer-event/": {
      "filePath": "pointer-event/index.tsx"
    },
    "/qr-code/": {
      "filePath": "qr-code/index.tsx"
    },
    "/transition/": {
      "filePath": "transition/index.tsx"
    },
    "/uri-encoding/": {
      "filePath": "uri-encoding/index.tsx"
    },
    "/uuid/": {
      "filePath": "uuid/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
