/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UriEncodingImport } from './routes/uri-encoding'
import { Route as TransitionImport } from './routes/transition'
import { Route as QrCodeImport } from './routes/qr-code'
import { Route as PointerEventImport } from './routes/pointer-event'
import { Route as KeyboardEventImport } from './routes/keyboard-event'
import { Route as DirectoryTreeImport } from './routes/directory-tree'
import { Route as IndexImport } from './routes/index'
import { Route as UuidIndexImport } from './routes/uuid/index'

// Create/Update Routes

const UriEncodingRoute = UriEncodingImport.update({
  id: '/uri-encoding',
  path: '/uri-encoding',
  getParentRoute: () => rootRoute,
} as any)

const TransitionRoute = TransitionImport.update({
  id: '/transition',
  path: '/transition',
  getParentRoute: () => rootRoute,
} as any)

const QrCodeRoute = QrCodeImport.update({
  id: '/qr-code',
  path: '/qr-code',
  getParentRoute: () => rootRoute,
} as any)

const PointerEventRoute = PointerEventImport.update({
  id: '/pointer-event',
  path: '/pointer-event',
  getParentRoute: () => rootRoute,
} as any)

const KeyboardEventRoute = KeyboardEventImport.update({
  id: '/keyboard-event',
  path: '/keyboard-event',
  getParentRoute: () => rootRoute,
} as any)

const DirectoryTreeRoute = DirectoryTreeImport.update({
  id: '/directory-tree',
  path: '/directory-tree',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UuidIndexRoute = UuidIndexImport.update({
  id: '/uuid/',
  path: '/uuid/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/directory-tree': {
      id: '/directory-tree'
      path: '/directory-tree'
      fullPath: '/directory-tree'
      preLoaderRoute: typeof DirectoryTreeImport
      parentRoute: typeof rootRoute
    }
    '/keyboard-event': {
      id: '/keyboard-event'
      path: '/keyboard-event'
      fullPath: '/keyboard-event'
      preLoaderRoute: typeof KeyboardEventImport
      parentRoute: typeof rootRoute
    }
    '/pointer-event': {
      id: '/pointer-event'
      path: '/pointer-event'
      fullPath: '/pointer-event'
      preLoaderRoute: typeof PointerEventImport
      parentRoute: typeof rootRoute
    }
    '/qr-code': {
      id: '/qr-code'
      path: '/qr-code'
      fullPath: '/qr-code'
      preLoaderRoute: typeof QrCodeImport
      parentRoute: typeof rootRoute
    }
    '/transition': {
      id: '/transition'
      path: '/transition'
      fullPath: '/transition'
      preLoaderRoute: typeof TransitionImport
      parentRoute: typeof rootRoute
    }
    '/uri-encoding': {
      id: '/uri-encoding'
      path: '/uri-encoding'
      fullPath: '/uri-encoding'
      preLoaderRoute: typeof UriEncodingImport
      parentRoute: typeof rootRoute
    }
    '/uuid/': {
      id: '/uuid/'
      path: '/uuid'
      fullPath: '/uuid'
      preLoaderRoute: typeof UuidIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeRoute
  '/keyboard-event': typeof KeyboardEventRoute
  '/pointer-event': typeof PointerEventRoute
  '/qr-code': typeof QrCodeRoute
  '/transition': typeof TransitionRoute
  '/uri-encoding': typeof UriEncodingRoute
  '/uuid': typeof UuidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeRoute
  '/keyboard-event': typeof KeyboardEventRoute
  '/pointer-event': typeof PointerEventRoute
  '/qr-code': typeof QrCodeRoute
  '/transition': typeof TransitionRoute
  '/uri-encoding': typeof UriEncodingRoute
  '/uuid': typeof UuidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/directory-tree': typeof DirectoryTreeRoute
  '/keyboard-event': typeof KeyboardEventRoute
  '/pointer-event': typeof PointerEventRoute
  '/qr-code': typeof QrCodeRoute
  '/transition': typeof TransitionRoute
  '/uri-encoding': typeof UriEncodingRoute
  '/uuid/': typeof UuidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid'
  id:
    | '__root__'
    | '/'
    | '/directory-tree'
    | '/keyboard-event'
    | '/pointer-event'
    | '/qr-code'
    | '/transition'
    | '/uri-encoding'
    | '/uuid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DirectoryTreeRoute: typeof DirectoryTreeRoute
  KeyboardEventRoute: typeof KeyboardEventRoute
  PointerEventRoute: typeof PointerEventRoute
  QrCodeRoute: typeof QrCodeRoute
  TransitionRoute: typeof TransitionRoute
  UriEncodingRoute: typeof UriEncodingRoute
  UuidIndexRoute: typeof UuidIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DirectoryTreeRoute: DirectoryTreeRoute,
  KeyboardEventRoute: KeyboardEventRoute,
  PointerEventRoute: PointerEventRoute,
  QrCodeRoute: QrCodeRoute,
  TransitionRoute: TransitionRoute,
  UriEncodingRoute: UriEncodingRoute,
  UuidIndexRoute: UuidIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/directory-tree",
        "/keyboard-event",
        "/pointer-event",
        "/qr-code",
        "/transition",
        "/uri-encoding",
        "/uuid/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/directory-tree": {
      "filePath": "directory-tree.tsx"
    },
    "/keyboard-event": {
      "filePath": "keyboard-event.tsx"
    },
    "/pointer-event": {
      "filePath": "pointer-event.tsx"
    },
    "/qr-code": {
      "filePath": "qr-code.tsx"
    },
    "/transition": {
      "filePath": "transition.tsx"
    },
    "/uri-encoding": {
      "filePath": "uri-encoding.tsx"
    },
    "/uuid/": {
      "filePath": "uuid/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
